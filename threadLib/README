User-Level Thread Library - Summary:

**Data Structure: (mythread.h)**

Thread control block - my_pthread: This contains thread specific information and data like thread id, pointer to parent, state (running,ready,waiting), joinable-field to denote if it is detachable or joinable, waitthreads - list of threads waiting for its termination and join_count - count on number of threads it is waiting for.

threadLib: List of TCB pointers to have track on threads created in process.

Thread Queue: General queue structure which can have linked list of TCBs. This is used to implement ready queue, wait queues for thread join, mutex and condition variable.

Mutex Structure: Contain field like lock, spin (count on threads waiting on lock), kind (denotes mutex is valid or invalid), wait queue for this mutex.

Condition Variable Structure: Contains mutex associated with condition and wait queue for this condition.
 
**Function Implementation**

Thread library initialization is done before executing main function(threadLib_init). This allocates memory to hold TCB pointers for maximum number of threads. It creates main thread as parent thread and initialize TCB structure. If preemptive scheduling is enabled, Signal handlers and signal stack are initialized.

Thread creation: A new TCB is allocated and initialized to point to parent thread. A new context is created for the thread. Stack memory is allocated to hold thread specific data. The context is modified such that on return it executes Thread_exit (if not called explicitly by user) and switched to scheduler to schedule next thread.

Thread yield: current thread context is saved. state of thread is changed and added back to ready queue. The next top thread in queue is scheduled.

Thread join: Joinable field and Waitthread queue of joinable threads(child) are updated. Current thread state is made waiting and moved to wait queue. current thread has join count.

Thread exit: If joinable, wake parent thread or decrease its join count. Change state and deallocate memory.

Scheduler: Non-preemptive is FIFO. It saves current thread context and restores next executable thread context. Preemptive scheduler does the same. But when preempted, the current execution context is determined (through machine specific info from ucontext) and switching occurs only if control is in user program. This is achieved by comparing with function base addresses.

Mutex lock/unlock: Atomic instructions are used. If lock is busy, thread is put in wait queue. It is awakened once thread is unlocked.

Condition var: wait function - unlock mutex, goes to wait queue and acquires before checking condition again. Signal, broadcast awakens single and all thread respectively from wait queue for cond.

Output:
make
./hw3a 5 1 3 8 9 10 8 78 81 90
In main..
Sorted data...
1 3 5 8 8 9 10 78 81 90


make clean
make MYPTHREAD=1
./hw3a 5 1 3 8 9 10 8 78 81 90
In main..
Sorted data...
1 3 5 8 8 9 10 78 81 90

make clean
make PREEMPTIVE=1
./hw3a 5 1 3 8 9 10 8 78 81 90
In main..
Sorted data...
1 3 5 8 8 9 10 78 81 90
